using System.Text;
using System.Security.Claims;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.IdentityModel.Tokens;
using Microsoft.OpenApi.Models;
using Swashbuckle.AspNetCore.Filters;
using CmdShiftLearn.Api.Models;
using CmdShiftLearn.Api.Services;
using CmdShiftLearn.Api.Middleware;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container
builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();

// Configure Swagger with JWT support
builder.Services.AddSwaggerGen(options =>
{
    options.AddSecurityDefinition("oauth2", new OpenApiSecurityScheme
    {
        Description = "Standard Authorization header using the Bearer scheme (\"Bearer {token}\")",
        In = ParameterLocation.Header,
        Name = "Authorization",
        Type = SecuritySchemeType.ApiKey
    });
    options.OperationFilter<SecurityRequirementsOperationFilter>();
    // Enable XML comments for Swagger documentation
    var xmlFilename = $"{System.Reflection.Assembly.GetExecutingAssembly().GetName().Name}.xml";
    var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFilename);
    if (File.Exists(xmlPath))
    {
        options.IncludeXmlComments(xmlPath);
    }
});

// Load Supabase settings
var supabaseSettings = builder.Configuration.GetSection("Supabase").Get<SupabaseSettings>();
builder.Services.Configure<SupabaseSettings>(builder.Configuration.GetSection("Supabase"));

// âœ… Add secure JWT authentication using Supabase token validation
// Get JWT secret directly from configuration to avoid any binding issues
var jwtSecret = builder.Configuration["Supabase:JwtSecret"] ?? string.Empty;

// Log the JWT secret being used (masked for security)
Console.WriteLine($"JWT Secret loaded: {(string.IsNullOrEmpty(jwtSecret) ? "EMPTY" : $"{jwtSecret[..Math.Min(3, jwtSecret.Length)]}...{(jwtSecret.Length > 3 ? jwtSecret[^Math.Min(3, jwtSecret.Length)..] : "")}")}");
Console.WriteLine($"JWT Secret length: {jwtSecret.Length}");

// Check if the secret is Base64 encoded (Supabase JWT secrets are typically Base64 encoded)
// This is just for informational purposes - we'll use the raw string regardless
bool isBase64 = false;
try {
    var decodedBytes = Convert.FromBase64String(jwtSecret);
    isBase64 = true;
    Console.WriteLine($"JWT Secret is valid Base64, decoded length: {decodedBytes.Length} bytes");
    Console.WriteLine("Note: We'll use the raw Base64 string as-is for JWT validation");
} catch {
    Console.WriteLine("JWT Secret is NOT valid Base64 - this might be a problem as Supabase typically uses Base64 encoded secrets");
}

if (string.IsNullOrEmpty(jwtSecret))
{
    Console.WriteLine("WARNING: JWT Secret is empty or not found in configuration!");
}

builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
    .AddJwtBearer(options =>
    {
        options.SaveToken = true;
        options.RequireHttpsMetadata = !builder.Environment.IsDevelopment();
        
        // For Supabase JWT validation, we should use the raw JWT secret string
        // The secret is already Base64 encoded and should be used as-is
        byte[] keyBytes = Encoding.UTF8.GetBytes(jwtSecret);
        Console.WriteLine("Using the JWT secret as-is (without decoding Base64 first)");
        
        options.TokenValidationParameters = new TokenValidationParameters
        {
            ValidateIssuer = true,
            ValidIssuer = "https://fqceiphubiqnorytayiu.supabase.co/auth/v1",
            ValidateAudience = false,
            ValidateLifetime = true,
            ValidateIssuerSigningKey = true,
            IssuerSigningKey = new SymmetricSecurityKey(keyBytes),
            ClockSkew = TimeSpan.Zero,
            ValidAlgorithms = new[] { "HS256" },
            NameClaimType = "sub"
        };
        
        options.Events = new JwtBearerEvents
        {
            OnTokenValidated = context =>
            {
                Console.WriteLine("Token validated successfully!");
                Console.WriteLine($"User: {context.Principal?.Identity?.Name}");
                Console.WriteLine($"Claims: {string.Join(", ", context.Principal?.Claims.Select(c => $"{c.Type}: {c.Value}") ?? Array.Empty<string>())}");
                return Task.CompletedTask;
            },
            OnAuthenticationFailed = context =>
            {
                Console.WriteLine($"Authentication failed: {context.Exception.GetType().Name}: {context.Exception.Message}");
                if (context.Exception.InnerException != null)
                {
                    Console.WriteLine($"Inner exception: {context.Exception.InnerException.GetType().Name}: {context.Exception.InnerException.Message}");
                }
                return Task.CompletedTask;
            },
            OnChallenge = context =>
            {
                Console.WriteLine($"OnChallenge: {context.Error}, {context.ErrorDescription}");
                return Task.CompletedTask;
            },
            OnMessageReceived = context =>
            {
                if (!string.IsNullOrEmpty(context.Token))
                {
                    Console.WriteLine($"Token received: {context.Token.Substring(0, Math.Min(10, context.Token.Length))}...");
                    try
                    {
                        var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
                        var jsonToken = handler.ReadJwtToken(context.Token);
                        Console.WriteLine($"Token issuer: {jsonToken.Issuer}");
                        Console.WriteLine($"Token algorithm: {jsonToken.Header.Alg}");
                        Console.WriteLine($"Token issued at: {jsonToken.IssuedAt}");
                        Console.WriteLine($"Token expires at: {jsonToken.ValidTo}");
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Error decoding token: {ex.Message}");
                    }
                }
                else
                {
                    Console.WriteLine("No token received in request");
                }
                return Task.CompletedTask;
            }
        };
    });

builder.Services.AddAuthorization();
builder.Services.AddSingleton<IUserProfileService, UserProfileService>();
builder.Services.AddSingleton<IEventLogger, EventLoggerService>();

// Additional registrations (challenge/tutorial loaders etc.)
// ...

var app = builder.Build();

app.UseHttpsRedirection();
app.UseAuthentication();
app.UseAuthorization();
app.UseSupabaseAuth();
app.MapControllers();
app.Run();