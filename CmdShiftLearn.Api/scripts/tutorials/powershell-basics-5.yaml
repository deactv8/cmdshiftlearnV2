id: powershell-basics-5
title: "Making Decisions: PowerShell Conditionals"
description: "Learn how to make your PowerShell commands make decisions using conditional logic. You'll discover how to use if/else statements, comparison operators, and perform different actions based on conditions."
difficulty: "Beginner"
xpReward: 150
steps:
  - id: step-1
    title: "Understanding Conditionals"
    instructions: >
      Welcome to your fifth PowerShell tutorial! Today we'll learn about conditional logic - how to make PowerShell make decisions.
      
      Conditional statements are like forks in a road - they allow PowerShell to choose different actions depending on whether certain conditions are true or false.
      
      Let's start with the simplest conditional statement: the if statement.
      
      First, let's create a variable to work with:
      
      $temperature = 75
      
      This creates a variable representing a temperature in degrees.
    expectedCommand: $temperature = 75
    hint: Type "$temperature = 75" to create a variable for our example.
    xpReward: 5
    
  - id: step-2
    title: "Simple If Statement"
    instructions: >
      Great! Now let's use an if statement to check if it's warm:
      
      if ($temperature -gt 70) { "It's warm outside!" }
      
      Here's what this does:
      1. The if keyword starts a conditional statement
      2. The condition ($temperature -gt 70) checks if temperature is greater than 70
      3. The code inside the braces { } runs only if the condition is true
      
      NOTE: In PowerShell, -gt means "greater than" (>)
    expectedCommand: if ($temperature -gt 70) { "It's warm outside!" }
    hint: Type the complete if statement on one line: "if ($temperature -gt 70) { \"It's warm outside!\" }" including the parentheses and curly braces.
    xpReward: 15
    
  - id: step-3
    title: "Understanding Comparison Operators"
    instructions: >
      Perfect! Since our temperature (75) is greater than 70, PowerShell displayed the message.
      
      PowerShell uses special operators for comparisons that are different from other languages:
      
      -eq : Equals (==)
      -ne : Not equals (!=)
      -gt : Greater than (>)
      -lt : Less than (<)
      -ge : Greater than or equal (>=)
      -le : Less than or equal (<=)
      
      Let's try another condition, checking if the temperature is exactly 75:
      
      if ($temperature -eq 75) { "The temperature is exactly 75 degrees." }
      
      Type the full if statement on one line.
    expectedCommand: if ($temperature -eq 75) { "The temperature is exactly 75 degrees." }
    hint: Type "if ($temperature -eq 75) { \"The temperature is exactly 75 degrees.\" }" with the -eq operator for equality.
    xpReward: 15
    
  - id: step-4
    title: "Adding an Else Clause"
    instructions: >
      Excellent! Now let's improve our if statement by adding an else clause. The else clause specifies what should happen when the condition is false.
      
      Let's create a new variable first:
      
      $currentHour = (Get-Date).Hour
      
      This gets the current hour of the day (0-23) from the system clock.
    expectedCommand: $currentHour = (Get-Date).Hour
    hint: Type "$currentHour = (Get-Date).Hour" to get the current hour of the day.
    xpReward: 10
    
  - id: step-5
    title: "If-Else Statement"
    instructions: >
      Great! Now let's use an if-else statement to determine if it's morning or afternoon:
      
      if ($currentHour -lt 12) { "Good morning!" } else { "Good afternoon!" }
      
      This statement will display different greetings based on the current time of day.
      
      Type the complete if-else statement. You can type it on multiple lines or all on one line.
    expectedCommand: if ($currentHour -lt 12) { "Good morning!" } else { "Good afternoon!" }
    hint: Type the full if-else statement comparing $currentHour to 12, with appropriate messages in each block.
    xpReward: 20
    
  - id: step-6
    title: "Multiple Conditions with ElseIf"
    instructions: >
      Perfect! For more complex decisions, we can use elseif to check multiple conditions in sequence.
      
      Let's create a more detailed greeting based on the time of day:
      
      if ($currentHour -lt 12) { "Good morning!" } elseif ($currentHour -lt 18) { "Good afternoon!" } else { "Good evening!" }
      
      This checks multiple conditions in order:
      1. If the hour is less than 12, it's morning
      2. Otherwise, if the hour is less than 18 (6 PM), it's afternoon
      3. Otherwise, it's evening
      
      Type the complete if-elseif-else statement.
    expectedCommand: if ($currentHour -lt 12) { "Good morning!" } elseif ($currentHour -lt 18) { "Good afternoon!" } else { "Good evening!" }
    hint: Type the full if-elseif-else statement with three different time periods and greetings.
    xpReward: 25
    
  - id: step-7
    title: "Combining Conditions with Logical Operators"
    instructions: >
      Excellent! Sometimes we need to check multiple conditions at once. PowerShell provides logical operators:
      
      -and : Both conditions must be true (&&)
      -or : At least one condition must be true (||)
      -not : Reverses a condition (!)
      
      Let's create a new variable for a second condition:
      
      $isRaining = $false
      
      This creates a boolean variable (true/false) indicating weather conditions. We're setting it to false.
    expectedCommand: $isRaining = $false
    hint: Type "$isRaining = $false" to create a boolean variable set to false.
    xpReward: 10
    
  - id: step-8
    title: "Using the AND Operator"
    instructions: >
      Perfect! Now let's create a condition that checks both temperature AND rain:
      
      if ($temperature -gt 70 -and -not $isRaining) { "It's a nice day for a walk!" } else { "Maybe stay inside today." }
      
      This condition is true only if:
      1. The temperature is greater than 70, AND
      2. It is NOT raining
      
      Type the complete if-else statement with the combined condition.
    expectedCommand: if ($temperature -gt 70 -and -not $isRaining) { "It's a nice day for a walk!" } else { "Maybe stay inside today." }
    hint: Type the if-else statement using both the -and and -not operators to combine the conditions.
    xpReward: 25
    
  - id: step-9
    title: "Using the OR Operator"
    instructions: >
      Excellent! Let's try using the OR operator:
      
      $isWeekend = $true
      
      This creates another boolean variable indicating if it's the weekend.
    expectedCommand: $isWeekend = $true
    hint: Type "$isWeekend = $true" to create a boolean variable set to true.
    xpReward: 5
    
  - id: step-10
    title: "Creating an OR Condition"
    instructions: >
      Great! Now let's use the OR operator to create a condition that checks if it's hot OR if it's the weekend:
      
      if ($temperature -gt 85 -or $isWeekend) { "Time for some ice cream!" } else { "Focus on work for now." }
      
      This condition is true if EITHER:
      1. The temperature is greater than 85, OR
      2. It's the weekend
      
      Type the complete if-else statement with the OR condition.
    expectedCommand: if ($temperature -gt 85 -or $isWeekend) { "Time for some ice cream!" } else { "Focus on work for now." }
    hint: Type the if-else statement using the -or operator to combine the two conditions.
    xpReward: 20
    
  - id: step-11
    title: "Congratulations!"
    instructions: >
      Amazing work! You've completed the tutorial on PowerShell conditionals!
      
      Let's review what you've learned:
      
      1. Using if statements to make decisions
      2. PowerShell comparison operators (-eq, -gt, -lt, etc.)
      3. Adding else clauses for alternative actions
      4. Using elseif for multiple conditions
      5. Combining conditions with logical operators (-and, -or, -not)
      
      Conditional logic is a fundamental concept in PowerShell and all programming. It allows you to:
      - Make decisions based on data
      - Create dynamic, responsive scripts
      - Handle different scenarios appropriately
      
      You've now learned the five core PowerShell concepts:
      1. Basic commands and navigation
      2. Exploring the file system
      3. Working with variables
      4. Building pipelines
      5. Using conditional logic
      
      With these fundamentals, you're well on your way to becoming a PowerShell expert!
      
      Type "exit" to complete this tutorial.
    expectedCommand: exit
    hint: Type "exit" and press Enter to finish this tutorial.
    xpReward: 15
