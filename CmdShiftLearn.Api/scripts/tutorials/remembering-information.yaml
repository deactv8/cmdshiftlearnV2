id: remembering-information
title: "Remembering Information: Using Variables"
description: "Learn how to store and use information in PowerShell using variables."
xp: 150
difficulty: "Beginner"
content: |
  # Remembering Information: Using Variables

  ## Welcome to Your Next Adventure!

  You've learned to talk to PowerShell and explore your computer. Now, let's learn how to make PowerShell remember things for us!

  ## What Are Variables?

  Think of variables like labeled containers:
  - Each container has a name (starting with $)
  - You can put information inside the container
  - You can look at what's inside anytime
  - You can change what's inside
  
  Variables are super helpful when you need to use the same information multiple times or save the results of a command to use later.

  ## What You'll Learn

  In this tutorial, you'll:
  - Create your first variable
  - Store different types of information
  - Use variables in commands
  - See what variables you have
  - Change what's stored in a variable

  Ready to start remembering? Let's go!

steps:
  - id: step1
    title: "Creating Your First Variable"
    instructions: |
      Let's create your first variable! We'll name it $name and store your name in it.
      
      Type '$name = "YourName"' (replace "YourName" with your actual name).
      
      Notice that:
      - Variable names start with $
      - We use = to put information into the variable
      - Text information (called "strings") is put in quotes
    expectedCommand: "$name = \"YourName\""
    hint: "Type '$name = ' followed by your name in quotes. For example: $name = \"Alice\""
    xp: 20
    validation:
      type: "contains"
      value: "$name ="
    
  - id: step2
    title: "Seeing What's In Your Variable"
    instructions: |
      Great! You've created your first variable. To see what's inside, simply type the variable name.
      
      Type '$name' to see the value stored in your variable.
    expectedCommand: "$name"
    hint: "Just type the variable name: $name"
    xp: 15
    
  - id: step3
    title: "Using Your Variable in a Command"
    instructions: |
      Variables are most useful when you use them in commands. Let's use your $name variable to create a personalized greeting.
      
      Type 'Write-Host "Hello, $name! Welcome to PowerShell!"'
      
      Notice that when you put variables inside double quotes (" "), PowerShell replaces the variable name with its value.
    expectedCommand: "Write-Host \"Hello, $name! Welcome to PowerShell!\""
    hint: "Type 'Write-Host \"Hello, $name! Welcome to PowerShell!\"' exactly as shown. Make sure to use double quotes so your name appears in the greeting."
    xp: 25
    validation:
      type: "contains"
      value: "Write-Host"
    
  - id: step4
    title: "Creating a Number Variable"
    instructions: |
      Variables can store different types of information. Let's create a variable to store a number.
      
      Type '$age = 25' (you can use any number you like).
      
      Notice that numbers don't need quotes around them.
    expectedCommand: "$age = 25"
    hint: "Type '$age = ' followed by a number. For example: $age = 25"
    xp: 20
    validation:
      type: "contains"
      value: "$age ="
    
  - id: step5
    title: "Doing Math with Variables"
    instructions: |
      One advantage of storing numbers in variables is that we can do math with them!
      
      Let's add 10 to your age variable.
      
      Type '$age + 10' to see the result of adding 10 to your age.
    expectedCommand: "$age + 10"
    hint: "Type '$age + 10' exactly as shown."
    xp: 20
    
  - id: step6
    title: "Changing a Variable's Value"
    instructions: |
      You can change what's stored in a variable anytime. Let's update your age.
      
      Type '$age = $age + 10' to add 10 years to your age and save the result back in the $age variable.
    expectedCommand: "$age = $age + 10"
    hint: "Type '$age = $age + 10' exactly as shown."
    xp: 25
    
  - id: step7
    title: "Seeing All Your Variables"
    instructions: |
      Want to see all the variables you've created? PowerShell has a command for that!
      
      Type 'Get-Variable name, age' to see both variables you created.
    expectedCommand: "Get-Variable name, age"
    hint: "Type 'Get-Variable name, age' exactly as shown. Notice you don't use $ when listing the variable names with this command."
    xp: 25
